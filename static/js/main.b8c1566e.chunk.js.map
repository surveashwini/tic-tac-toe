{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","handleClick","Game","useState","Array","fill","history","setHistory","xIsNext","setXIsNext","length","current","setCurrent","winner","calculateWinner","status","moves","map","step","move","description","jumpTo","updatedSquares","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"8KAIA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAU,SAASC,QAASF,EAAME,QAA1C,SACGF,EAAMG,QAKb,SAASC,EAAMJ,GACb,IAAMK,EAAe,SAACC,GACpB,OACE,cAACP,EAAD,CACEI,MAAOH,EAAMO,QAAQD,GACrBJ,QAAS,WACPF,EAAMQ,YAAYF,OAM1B,OACE,gCACE,sBAAKL,UAAU,YAAf,UACGI,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKJ,UAAU,YAAf,UACGI,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKJ,UAAU,YAAf,UACGI,EAAa,GACbA,EAAa,GACbA,EAAa,SAMtB,SAASI,EAAKT,GACZ,MAA8BU,mBAAS,CAAC,CAAEH,QAASI,MAAM,GAAGC,KAAK,SAAjE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA8BN,mBAASG,EAAQA,EAAQI,OAAS,IAAhE,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAASC,EAAgBH,EAAQX,SACjCe,EAASF,EAAM,iBACPA,GADO,uBAEDL,EAAU,IAAM,KAiB9BQ,EAAQV,EAAQW,KAAI,SAACC,EAAMC,GAC/B,IAAMC,EAAcD,EAAO,eAAiBA,EAAO,mBACnD,OACE,6BACE,wBAAQxB,QAAS,kBARR,SAACwB,GACdP,EAAWN,EAAQa,IAOQE,CAAOF,IAA9B,SAAsCC,KAD/BD,MAMb,OACE,sBAAKzB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,CAAOG,QAASW,EAAQX,QAASC,YAAa,SAACF,GAAD,OA3BhC,SAACA,GACnB,IAAIuB,EAAc,YAAOX,EAAQX,SAC7Bc,EAAgBH,EAAQX,UAAYW,EAAQX,QAAQD,KAGxDuB,EAAevB,GAAKS,EAAU,IAAM,IACpCC,GAAYD,GACZI,EAAW,CAAEZ,QAASsB,IACtBf,EAAW,GAAD,mBAAKD,GAAL,CAAc,CAAEN,QAASsB,OAmBsBrB,CAAYF,QAEnE,sBAAKL,UAAU,YAAf,UACE,8BAAMqB,IACN,6BAAKC,UAMb,SAASF,EAAgBd,GAWvB,IAVA,IAAMuB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAxB,EAAI,EAAGA,EAAIwB,EAAMb,OAAQX,IAAK,CACrC,kBAAkBwB,EAAMxB,GAAxB,GAAOyB,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI1B,EAAQwB,IAAMxB,EAAQwB,KAAOxB,EAAQyB,IAAMzB,EAAQwB,KAAOxB,EAAQ0B,GACpE,OAAO1B,EAAQwB,GAGnB,OAAO,KAGTG,IAASC,OAAO,cAAC1B,EAAD,IAAU2B,SAASC,eAAe,U","file":"static/js/main.b8c1566e.chunk.js","sourcesContent":["import \"./index.css\";\nimport ReactDOM from \"react-dom\";\nimport { useState } from \"react\";\n\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const renderSquare = (i) => {\n    return (\n      <Square\n        value={props.squares[i]}\n        onClick={() => {\n          props.handleClick(i);\n        }}\n      />\n    );\n  };\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nfunction Game(props) {\n  const [history, setHistory] = useState([{ squares: Array(9).fill(null) }]);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [current, setCurrent] = useState(history[history.length - 1]);\n  const winner = calculateWinner(current.squares);\n  const status = winner\n    ? `winner ${winner}`\n    : `Next player: ${xIsNext ? \"X\" : \"O\"}`;\n\n  const handleClick = (i) => {\n    let updatedSquares = [...current.squares];\n    if (calculateWinner(current.squares) || current.squares[i]) {\n      return;\n    }\n    updatedSquares[i] = xIsNext ? \"X\" : \"O\";\n    setXIsNext(!xIsNext);\n    setCurrent({ squares: updatedSquares });\n    setHistory([...history, { squares: updatedSquares }]);\n  };\n\n  const jumpTo = (move) => {\n    setCurrent(history[move]);\n  };\n\n  const moves = history.map((step, move) => {\n    const description = move ? \"Go to move #\" + move : \"Go to game start\";\n    return (\n      <li key={move}>\n        <button onClick={() => jumpTo(move)}>{description}</button>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board squares={current.squares} handleClick={(i) => handleClick(i)} />\n      </div>\n      <div className=\"game-info\">\n        <div>{status}</div>\n        <ol>{moves}</ol>\n      </div>\n    </div>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}